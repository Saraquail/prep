To complete this drill, you need to implement 2 functions, max and min. Both functions should take a single argument:
an array of numbers called numbers. max(numbers) should return the largest number in the array, while min(numbers)
should return the smallest.

Assume that the numbers input only contains numbers (that is, you don't have to inspect your inputs to confirm they
only contain numbers).

If the numbers array is empty, then both max and min should return null or undefined, whichever is more convenient.

Plain language plan:

 determine if second array item is a higher number than first, 
determine if next array item is a higher number than previous, 
do this until the last number

count will be number of times to run loop and will equal length of array, but will start at 0 (the first array item number)



function max(numbers) {
  const count = numbers.length
  //set current max to null, replace with next higher number
  let max = null;
  for (let i =0; i < count; i++ ) {
    if (numbers[i] > max  || max === null) {
      max=numbers[i]
    }
    console.log(max,numbers)
  }
  return max;
}


function min(numbers) {
  const count = numbers.length
  //set current max to null, replace with next lower number
  let min = null;
  for (let i =0; i < count; i++ ) {
    if (numbers[i] < min || min === null) {
      min=numbers[i]
    }
    console.log(min,numbers)
  }
  return min;
}

/* From here down, you are not expected to 
   understand.... for now :)  
   
   
   Nothing to see here!
   


// tests
*/
function testFunctionWorks(fn, input, expected) {
  if (fn(input) === expected) {
    console.log('SUCCESS: `' + fn.name + '` works on `[' + input + ']`');
    return true;
  } else {
    console.log(
      'FAILURE: `' +
        fn.name +
        '([' +
        input +
        '])` should be ' +
        expected +
        ' but was ' +
        fn(input)
    );
    return false;
  }
}

function testEmpty(fn) {
  if (fn([]) === null || fn([]) == undefined) {
    console.log(`SUCCESS: ${fn.name} works on empty arrays`);
    return true;
  } else {
    console.log(
      `FAILURE: ${fn.name} should return undefined or null for empty arrays`
    );
    return false;
  }
}

(function runTests() {
  // we'll use the variables in our test cases
  const numList1 = [-5, 28, 98, -20013, 0.7878, 22, 115];
  const realMin1 = numList1[3];
  const realMax1 = numList1[6];
  const numList2 = [0, 1, 2, 3, 4];
  const realMin2 = numList2[0];
  const realMax2 = numList2[4];

  const testResults = [
    testFunctionWorks(max, numList1, realMax1),
    testFunctionWorks(max, numList2, realMax2),
    testFunctionWorks(min, numList1, realMin1),
    testFunctionWorks(min, numList2, realMin2),
    testEmpty(max),
    testEmpty(min),
  ];

  const numPassing = testResults.filter(function(result) {
    return result;
  }).length;
  console.log(numPassing + ' out of ' + testResults.length + ' tests passing.');
})();
